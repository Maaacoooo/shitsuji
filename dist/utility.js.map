{"version":3,"sources":["../src/utility.js"],"names":["Utility","io","createInterface","input","process","stdin","output","stdout","message","Promise","resolve","reject","Error","question","answer","close","source","match"],"mappings":";;;;;;;;;;AAAA;;;;;;;;IAEqBA,O;AACjB,uBAAc;AAAA;;AACV,aAAKC,EAAL,GAAU,mBAASC,eAAT,CAAyB;AAC/BC,mBAAOC,QAAQC,KADgB;AAE/BC,oBAAQF,QAASG;AAFc,SAAzB,CAAV;AAIH;;AAED;;;;;;;;;6BAKKC,O,EAAS;AAAA;;AACV,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,oBAAG,OAAOH,OAAP,IAAkB,QAArB,EACGG,OAAO,IAAIC,KAAJ,yDAA+DJ,OAA/D,yCAA+DA,OAA/D,eAAP;;AAEH,sBAAKP,EAAL,CAAQY,QAAR,CAAiBL,OAAjB,EAA0B,UAACM,MAAD,EAAY;AAClCJ,4BAAQI,MAAR;AACA,0BAAKb,EAAL,CAAQc,KAAR;AACH,iBAHD;AAIH,aARM,CAAP;AASH;;AAED;;;;;;;;kCAKUC,M,EAAQ;AACd,gBAAG,OAAOA,MAAP,IAAiB,QAApB,EACI,MAAM,IAAIJ,KAAJ,4CAAkDI,MAAlD,yCAAkDA,MAAlD,eAAN;;AAEJ,gBAAIC,QAAQD,OAAOC,KAAP,CAAa,qBAAb,CAAZ;;AAEA;AACA;AACA,gBAAG,OAAOA,KAAP,IAAgB,OAAhB,IAA2BA,QAAQ,CAAtC,EAAyC;AACrCA,wBAAQD,OAAOC,KAAP,CAAa,sBAAb,CAAR;AACH;;AAED,mBAAOA,MAAM,CAAN,CAAP;AACH;;;;;;kBA3CgBjB,O","file":"utility.js","sourcesContent":["import readline from 'readline';\n\nexport default class Utility {\n    constructor() {\n        this.io = readline.createInterface({\n            input: process.stdin,\n            output: process. stdout\n        });\n    }\n\n    /**\n     * Read input from user\n     * @param {string} message\n     * @param {function} callback\n     */\n    read(message) {\n        return new Promise((resolve, reject) => {    \n            if(typeof message != \"string\")\n               reject(new Error(`read: first argument is expecting a string ${typeof message} given.`)); \n\n            this.io.question(message, (answer) => {\n                resolve(answer);\n                this.io.close();\n            });\n        });\n    }\n\n    /**\n     * Scrape video link from string convert HTML.\n     * @param {string} source\n     * @return {string} matched video URL.\n     */\n    scrapeMP4(source) {\n        if(typeof source != \"string\")\n            throw new Error(`scrapeMP4: expecting a string ${typeof source} given.`);\n        \n        let match = source.match(/http:\\/\\/(.*?).mp4/g);\n        \n        // if there's no video link found using http protocol \n        // try to match source with https instead.\n        if(typeof match == \"array\" && match < 0) {\n            match = source.match(/https:\\/\\/(.*?).mp4/g);\n        }\n        \n        return match[0];\n    }\n}"]}